!function(){"use strict";class e{constructor(e,t){this._formSelector=e.formSelector,this._inputSelector=e.inputSelector,this._submitButtonSelector=e.submitButtonSelector,this._inactiveButtonClass=e.inactiveButtonClass,this._inputErrorClass=e.inputErrorClass,this._errorClass=e.errorClass,this._inputInvalidClass=e.inputInvalidClass,this._formElement=t,this._submitButton=this._formElement.querySelector(this._submitButtonSelector),this._inputs=Array.from(this._formElement.querySelectorAll(this._inputSelector))}_hideAllErrors(){Array.from(this._formElement.querySelectorAll(`.${this._inputErrorClass}`)).forEach((e=>{this._hideInputError(e)}))}_validateInput(e){const t=e.parentElement.querySelector(`.${this._inputErrorClass}`);e.validity.valid?this._hideInputError(t,e):this._showInputError(t,e.validationMessage,e)}_showInputError(e,t,s){e.textContent=t,e.classList.add(this._errorClass),s&&s.classList.add(this._inputInvalidClass)}_hideInputError(e,t){e.textContent="",e.classList.remove(this._errorClass),t&&t.classList.remove(this._inputInvalidClass)}_toggleButtonState(){this._inputs.every((e=>e.validity.valid))?this._enableButton():this._disableButton()}_enableButton(){this._submitButton.removeAttribute("disabled"),this._submitButton.classList.remove(this._inactiveButtonClass)}_disableButton(){this._submitButton.setAttribute("disabled",!0),this._submitButton.classList.add(this._inactiveButtonClass)}enableValidation(){this._formElement.addEventListener("submit",(e=>{e.preventDefault()})),this._inputs.forEach((e=>{e.addEventListener("input",(()=>{this._validateInput(e),this._toggleButtonState()}))}))}disableButton(){this._submitButton&&this._disableButton()}}class t{constructor(e,t,s,r,i){this._id=e._id,this._name=e.name,this._link=e.link,this._isLiked=e.isLiked,this._cardSelector=t,this._handleImageClick=s,this._handleDeleteButtonClick=r,this._handleLikeButtonClick=i}_getTemplate(){const e=document.querySelector(this._cardSelector);this._cardElement=e.content.firstElementChild.cloneNode(!0)}_setEventListeners(){this._cardLikeButton.addEventListener("click",(()=>{this._handleLikeButtonClick(this)})),this._cardDeleteButton.addEventListener("click",(()=>{this._handleDeleteButtonClick(this)})),this.cardImageElement.addEventListener("click",(()=>{this._handleImageClick({name:this._name,link:this._link})}))}handleDeleteButton=()=>{this._cardElement.remove(),this._cardElement=null};setIsLiked(e){this._isLiked=e,this.renderLikes()}isLiked(){return this._isLiked}renderLikes(){this._isLiked?this._cardLikeButton.classList.add("liked"):this._cardLikeButton.classList.remove("liked")}getView(){return this._getTemplate(),this._cardLikeButton=this._cardElement.querySelector(".card__like-button"),this._cardDeleteButton=this._cardElement.querySelector(".card__delete-button"),this.cardTitleElement=this._cardElement.querySelector(".card__title"),this.cardImageElement=this._cardElement.querySelector(".card__image"),this.cardTitleElement.textContent=this._name,this.cardImageElement.src=this._link,this.cardImageElement.alt=this._name,this._setEventListeners(),this.renderLikes(),this._cardElement}}class s{constructor(e,t){let{items:s,renderer:r}=e;this._items=s,this._renderer=r,this._container=document.querySelector(t)}renderItems(){this._items.forEach((e=>{const t=this._renderer(e);this._container.append(t)}))}addItem(e){this._container.prepend(e)}}class r{constructor(e){this._popup=document.querySelector(e),this._closeButton=this._popup.querySelector(".modal__close")}open(){this._popup.classList.add("modal_opened"),document.addEventListener("keydown",this._handleEscClose)}close(){this._popup.classList.remove("modal_opened"),document.removeEventListener("keydown",this._handleEscClose)}setEventListeners(){this._closeButton.addEventListener("click",(()=>{this.close()})),this._popup.addEventListener("click",(e=>{e.target===this._popup&&this.close()}))}_handleEscClose=e=>{"Escape"===e.key&&this.close()}}class i extends r{constructor(e,t){super(e),this._submitCallback=t,this._form=this._popup.querySelector(".modal__form"),this._inputFields=Array.from(this._form.querySelectorAll(".modal__text-input")),this._submitButton=this._form.querySelector(".modal__button")}_getInputValues(){const e={};return this._inputFields.forEach((t=>{e[t.name]=t.value})),e}close(){this._form.reset(),super.close()}renderLoading(e){this._submitButton.textContent=e?"Saving...":"Save"}setEventListeners(){super.setEventListeners(),this._form.addEventListener("submit",(e=>{e.preventDefault(),this._submitCallback(this._getInputValues())}))}}const n={formSelector:".modal__form",inputSelector:".modal__text-input",submitButtonSelector:".modal__button",inactiveButtonClass:"modal__button-inactive",inputErrorClass:"modal__invalid",errorClass:"modal__invalid_active",inputInvalidClass:"modal__text_invalid"},o=document.querySelector(".profile__edit-button"),a=document.querySelector(".profile__add-button"),l=document.querySelector("#title-textbox"),d=document.querySelector("#subtitle-textbox"),c=document.querySelector("#card-title-textbox"),h=document.querySelector("#card-subtitle-textbox"),u=document.querySelector(".profile__add-image"),_=new class{constructor(e){this.baseUrl=e.baseUrl,this.headers=e.headers}_checkServerResponse(e){return e.ok?e.json():Promise.reject(`Error: ${e.status}`)}getInitialCards(){return fetch(`${this.baseUrl}/cards`,{headers:this.headers}).then(this._checkServerResponse)}getUserInfo(){return fetch(`${this.baseUrl}/users/me`,{headers:this.headers}).then(this._checkServerResponse)}updateProfile(e,t){return fetch(`${this.baseUrl}/users/me`,{method:"PATCH",headers:{...this.headers,"Content-Type":"application/json"},body:JSON.stringify({name:e,about:t})}).then(this._checkServerResponse)}addCard(e){let{name:t,link:s}=e;return fetch(`${this.baseUrl}/cards`,{method:"POST",headers:{...this.headers,"Content-Type":"application/json"},body:JSON.stringify({name:t,link:s})}).then(this._checkServerResponse)}deleteCard(e){return fetch(`${this.baseUrl}/cards/${e}`,{method:"DELETE",headers:this.headers}).then(this._checkServerResponse)}dislikeCard(e){return fetch(`${this.baseUrl}/cards/${e}/likes`,{method:"DELETE",headers:this.headers}).then(this._checkServerResponse)}likeCard(e){return fetch(`${this.baseUrl}/cards/${e}/likes`,{method:"PUT",headers:this.headers}).then(this._checkServerResponse)}updateAvatar(e){let{link:t}=e;return fetch(`${this.baseUrl}/users/me/avatar`,{method:"PATCH",headers:this.headers,body:JSON.stringify({avatar:t})}).then(this._checkServerResponse)}}({baseUrl:"https://around-api.en.tripleten-services.com/v1",headers:{authorization:"d9d73c7f-57bf-4e5e-8837-ef7b15edaabc","Content-Type":"application/json"}});function m(e){e.isLiked()?_.dislikeCard(e._id).then((t=>{e.setIsLiked(t.isLiked)})).catch((e=>{console.error(e)})):_.likeCard(e._id).then((t=>{e.setIsLiked(t.isLiked)})).catch(console.error)}function p(e){v.setConfirm((()=>{v.renderLoading(!0),_.deleteCard(e._id).then((t=>{e.handleDeleteButton(t),v.close()})).catch((e=>{console.error("Error deleting card:",e)})).finally((()=>{v.renderLoading(!1)}))})),v.open()}const v=new class extends r{constructor(e){super(e),this._popupForm=this._popup.querySelector(".modal__form"),this._submitButton=this._popupForm.querySelector(".modal__button")}setEventListeners(){this._popupForm.addEventListener("submit",(e=>{e.preventDefault(),this._handleFormSubmit()})),super.setEventListeners()}setConfirm(e){this._handleFormSubmit=e}renderLoading(e){this._submitButton.textContent=e?"Deleting...":"delete"}}("#delete-modal-popup",p);v.setEventListeners(),u.addEventListener("click",f);const E=new i("#modal-avatar-popup",(function(e){E.renderLoading(!0),_.updateAvatar(e).then((e=>{console.log("Avatar updated successfully"),k.setAvatar(e.avatar),E.close()})).catch((e=>{console.error("Error updating avatar:",e)})).finally((()=>{E.renderLoading(!1)}))}));function f(){E.open()}E.setEventListeners();const b=new i("#profile-add-modal",(function(){b.renderLoading(!0),console.log(),_.addCard({name:c.value,link:h.value}).then((e=>{console.log("Card added successfully:"),function(e){const t=I(e);x.addItem(t)}(e),b.close()})).catch((e=>{console.error("Error adding card:",e)})).finally((()=>{b.renderLoading(!1)}))})),L=new i("#profile-edit-modal",(function(){const e=l.value,t=d.value;L.renderLoading(!0),_.updateProfile(e,t).then((()=>{console.log("Profile updated successfully:"),k.setUserInfo({name:e,job:t}),L.close()})).catch((e=>{console.error("Error updating profile:",e)})).finally((()=>{L.renderLoading(!1)}))}));b.setEventListeners(),L.setEventListeners(),a.addEventListener("click",(()=>{b.open()})),o.addEventListener("click",(()=>{const{name:e,job:t}=k.getUserInfo();l.value=e,d.value=t,L.open()}));const k=new class{constructor(e){let{nameSelector:t,jobSelector:s,avatarSelector:r}=e;this._nameElement=document.querySelector(t),this._jobElement=document.querySelector(s),this._avatarElement=document.querySelector(r)}getUserInfo(){return{name:this._nameElement.textContent,job:this._jobElement.textContent}}setUserInfo(e){let{name:t,about:s}=e;this._nameElement.textContent=t,this._jobElement.textContent=s}setAvatar(e){this._avatarElement.src=e}}({nameSelector:".profile__title",jobSelector:".profile__subtitle",avatarSelector:".profile__image"}),S=document.forms["add-form"],C=document.forms["modal-form"],g=new e(n,S),y=new e(n,C);function B(e){q.open(e)}function I(e){return new t(e,"#card-template",B,p,m,f).getView()}g.disableButton(),y.disableButton(),g.enableValidation(),y.enableValidation();const q=new class extends r{constructor(e){super(e),this._image=this._popup.querySelector(".modal__image"),this._caption=this._popup.querySelector(".modal__image-subtitle")}open(e){this._image.src=e.link,this._image.alt=`Photo of ${e.name}`,this._caption.textContent=e.name,super.open()}setEventListeners(){super.setEventListeners()}}("#modal-image-preview");let x;q.setEventListeners(),Promise.all([_.getInitialCards(),_.getUserInfo()]).then((e=>{let[t,r]=e;x=new s({items:t,renderer:I},".cards__list"),x.renderItems(),k.setUserInfo({name:r.name,about:r.about}),k.setAvatar(r.avatar)})).catch((e=>{console.error("Error fetching initial data:",e)}))}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,