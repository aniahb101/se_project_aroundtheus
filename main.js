!function(){"use strict";class e{constructor(e,t){this._formSelector=e.formSelector,this._inputSelector=e.inputSelector,this._submitButtonSelector=e.submitButtonSelector,this._inactiveButtonClass=e.inactiveButtonClass,this._inputErrorClass=e.inputErrorClass,this._errorClass=e.errorClass,this._inputInvalidClass=e.inputInvalidClass,this._formElement=t,this._submitButton=this._formElement.querySelector(this._submitButtonSelector),this._inputs=Array.from(this._formElement.querySelectorAll(this._inputSelector))}_hideAllErrors(){Array.from(this._formElement.querySelectorAll(`.${this._inputErrorClass}`)).forEach((e=>{this._hideInputError(e)}))}_validateInput(e){const t=e.parentElement.querySelector(`.${this._inputErrorClass}`);e.validity.valid?this._hideInputError(t,e):this._showInputError(t,e.validationMessage,e)}_showInputError(e,t,r){e.textContent=t,e.classList.add(this._errorClass),r&&r.classList.add(this._inputInvalidClass)}_hideInputError(e,t){e.textContent="",e.classList.remove(this._errorClass),t&&t.classList.remove(this._inputInvalidClass)}_toggleButtonState(){this._inputs.every((e=>e.validity.valid))?this._enableButton():this._disableButton()}_enableButton(){this._submitButton.removeAttribute("disabled"),this._submitButton.classList.remove(this._inactiveButtonClass)}_disableButton(){this._submitButton.setAttribute("disabled",!0),this._submitButton.classList.add(this._inactiveButtonClass)}enableValidation(){this._formElement.addEventListener("submit",(e=>{e.preventDefault()})),this._inputs.forEach((e=>{e.addEventListener("input",(()=>{this._validateInput(e),this._toggleButtonState()}))}))}disableButton(){this._submitButton&&this._disableButton()}}class t{constructor(e,t,r,s,n){this._id=e._id,this._name=e.name,this._link=e.link,this._isLiked=e.isLiked,this._cardSelector=t,this._handleImageClick=r,this._handleDeleteButtonClick=s,this._handleLikeButtonClick=n}_getTemplate(){const e=document.querySelector(this._cardSelector);this._cardElement=e.content.firstElementChild.cloneNode(!0)}_setEventListeners(){this._cardLikeButton.addEventListener("click",(()=>{this._handleLikeButtonClick(this)})),this._cardDeleteButton.addEventListener("click",(()=>{this._handleDeleteButtonClick(this)})),this.cardImageElement.addEventListener("click",(()=>{this._handleImageClick({name:this._name,link:this._link})}))}cardIsLiked(){return this._isLiked}handleDeleteButton=()=>{this._cardElement.remove(),this._cardElement=null};handleLikeButton=()=>{this._cardLikeButton.classList.toggle("liked")};getView(){return this._getTemplate(),this._cardLikeButton=this._cardElement.querySelector(".card__like-button"),this._cardDeleteButton=this._cardElement.querySelector(".card__delete-button"),this.cardTitleElement=this._cardElement.querySelector(".card__title"),this.cardImageElement=this._cardElement.querySelector(".card__image"),this.cardTitleElement.textContent=this._name,this.cardImageElement.src=this._link,this.cardImageElement.alt=this._name,this._setEventListeners(),this._cardElement}}class r{constructor(e,t){let{items:r,renderer:s}=e;this._items=r,this._renderer=s,this._container=document.querySelector(t)}renderItems(){this._items.forEach((e=>{const t=this._renderer(e);this._container.append(t)}))}addItem(e){this._container.prepend(e)}}class s{constructor(e){this._popup=document.querySelector(e),this._closeButton=this._popup.querySelector(".modal__close")}open(){this._popup.classList.add("modal_opened"),document.addEventListener("keydown",this._handleEscClose)}close(){this._popup.classList.remove("modal_opened"),document.removeEventListener("keydown",this._handleEscClose)}setEventListeners(){this._closeButton.addEventListener("click",(()=>{this.close()})),this._popup.addEventListener("click",(e=>{e.target===this._popup&&this.close()}))}_handleEscClose=e=>{"Escape"===e.key&&this.close()}}class n extends s{constructor(e,t){super(e),this._submitCallback=t,this._form=this._popup.querySelector(".modal__form"),this._inputFields=Array.from(this._form.querySelectorAll(".modal__text-input")),this._submitButton=this._form.querySelector(".modal__button")}_getInputValues(){const e={};return this._inputFields.forEach((t=>{e[t.name]=t.value})),e}reset(){this._form.reset()}renderLoading(e){this._submitButton.textContent=e?"Saving...":"Save"}setEventListeners(){super.setEventListeners(),this._form.addEventListener("submit",(e=>{e.preventDefault(),this._submitCallback(this._getInputValues()),this.reset()}))}}const i={formSelector:".modal__form",inputSelector:".modal__text-input",submitButtonSelector:".modal__button",inactiveButtonClass:"modal__button-inactive",inputErrorClass:"modal__invalid",errorClass:"modal__invalid_active",inputInvalidClass:"modal__text_invalid"},o=document.querySelector(".profile__edit-button"),a=document.querySelector(".profile__add-button"),l=document.querySelector("#title-textbox"),c=document.querySelector("#subtitle-textbox"),d=document.querySelector("#card-title-textbox"),h=document.querySelector("#card-subtitle-textbox"),u=document.querySelector(".profile__add-image");function _(e){q.cardLike(e._id,e.cardIsLiked()).then((t=>{console.log("Card liked successfully"),e.handleLikeButton(t)})).catch((e=>{console.error("Error liking card:",e)}))}function m(e){p.setConfirm((()=>{p.renderLoading(!0),q.deleteCard(e._id).then((t=>{e.handleDeleteButton(t),p.close()})).catch((e=>{console.error("Error deleting card:",e),p.close()})).finally((()=>{p.renderLoading(!1)}))})),p.open()}const p=new class extends s{constructor(e){super(e),this._popupForm=this._popup.querySelector(".modal__form"),this._submitButton=this._popupForm.querySelector(".modal__button")}setEventListeners(){this._popupForm.addEventListener("submit",(e=>{e.preventDefault(),this._handleFormSubmit()})),super.setEventListeners()}setConfirm(e){this._handleFormSubmit=e}renderLoading(e){this._submitButton.textContent=e?"Deleting...":"delete"}}("#delete-modal-popup",m);p.setEventListeners(),u.addEventListener("click",E);const v=new n("#modal-avatar-popup",(function(e){v.renderLoading(!0),q.updateAvatar(e).then((e=>{console.log("Avatar updated successfully"),g.setAvatar(e.avatar),v.close()})).catch((e=>{console.error("Error updating avatar:",e)})).finally((()=>{v.renderLoading(!1)}))}));function E(){v.open()}v.setEventListeners();const f=new n("#profile-add-modal",(function(){f.renderLoading(!0),q.addCard({name:d.value,link:h.value}).then((e=>{console.log("Card added successfully:"),function(e){const t=new r({items:e,renderer:B},".cards__list"),s=B(e);t.addItem(s)}(e),f.close()})).catch((e=>{console.error("Error adding card:",e)})).finally((()=>{f.renderLoading(!1)}))})),b=new n("#profile-edit-modal",(function(){const e=l.value,t=c.value;b.renderLoading(!0),q.updateProfile().then((r=>{console.log("Profile updated successfully:",r),g.setUserInfo({name:e,job:t})})).catch((e=>{console.error("Error updating profile:",e)})).finally((()=>{b.renderLoading(!1),b.close()}))}));f.setEventListeners(),b.setEventListeners(),a.addEventListener("click",(()=>{f.open()})),o.addEventListener("click",(()=>{const{name:e,job:t}=g.getUserInfo();l.value=e,c.value=t,b.open()}));const g=new class{constructor(e){let{nameSelector:t,jobSelector:r,avatarSelector:s}=e;this._nameElement=document.querySelector(t),this._jobElement=document.querySelector(r),this._avatarElement=document.querySelector(s)}getUserInfo(){return{name:this._nameElement.textContent,job:this._jobElement.textContent}}setUserInfo(e){let{name:t,job:r}=e;this._nameElement.textContent=t,this._jobElement.textContent=r}setAvatar(e){this._avatarElement.src=e}}({nameSelector:".profile__title",jobSelector:".profile__subtitle",avatarSelector:".profile__image"}),S=document.forms["add-form"],L=document.forms["modal-form"],k=new e(i,S),C=new e(i,L);function y(e){I.open(e)}function B(e){return new t(e,"#card-template",y,m,_,E).getView()}k.disableButton(),C.disableButton(),k.enableValidation(),C.enableValidation();const I=new class extends s{constructor(e){super(e),this._image=this._popup.querySelector(".modal__image"),this._caption=this._popup.querySelector(".modal__image-subtitle")}open(e){this._image.src=e.link,this._image.alt=`Photo of ${e.name}`,this._caption.textContent=e.name,super.open()}setEventListeners(){super.setEventListeners()}}("#modal-image-preview");I.setEventListeners();const q=new class{constructor(e){this.baseUrl=e.baseUrl,this.headers=e.headers}_checkServerResponse(e){return e.ok?e.json():Promise.reject(`Error: ${e.status}`)}getInitialCards(){return fetch(`${this.baseUrl}/cards`,{headers:this.headers}).then(this._checkServerResponse).catch((e=>{console.error("Error fetching initial cards:",e)}))}getUserInfo(){return fetch(`${this.baseUrl}/users/me`,{headers:this.headers}).then(this._checkServerResponse).catch((e=>{console.error("Error fetching user info:",e)}))}updateProfile(e,t){return fetch(`${this.baseUrl}/users/me`,{method:"PATCH",headers:{...this.headers,"Content-Type":"application/json"},body:JSON.stringify({name:e,about:t})}).then(this._checkServerResponse).catch((e=>{console.error("Error updating profile:",e)}))}addCard(e){let{name:t,link:r}=e;return fetch(`${this.baseUrl}/cards`,{method:"POST",headers:{...this.headers,"Content-Type":"application/json"},body:JSON.stringify({name:t,link:r})}).then(this._checkServerResponse).catch((e=>{console.error("Error adding card:",e)}))}deleteCard(e){return fetch(`${this.baseUrl}/cards/${e}`,{method:"DELETE",headers:this.headers}).then(this._checkServerResponse).catch((e=>{console.error("Error deleting card:",e)}))}cardLike(e,t){return fetch(`${this._baseUrl}/cards/${e}/likes`,{method:t?"DELETE":"PUT",headers:this._headers}).then(this._checkServerResponse).catch((e=>{console.error(`Error ${t?"removing":"liking"} card:`,e)}))}updateAvatar(e){let{link:t}=e;return fetch(`${this.baseUrl}/users/me/avatar`,{method:"PATCH",headers:this.headers,body:JSON.stringify({avatar:t})}).then(this._checkServerResponse).catch((e=>{console.error("Error updating avatar:",e)}))}}({baseUrl:"https://around-api.en.tripleten-services.com/v1",headers:{authorization:"d9d73c7f-57bf-4e5e-8837-ef7b15edaabc","Content-Type":"application/json"}});q.getInitialCards().then((e=>{new r({items:e,renderer:B},".cards__list").renderItems()})).catch((e=>{console.error("Error fetching initial cards:",e)})),q.getUserInfo().then((e=>{g.setUserInfo({name:e.name,job:e.job}),g.setAvatar(e.avatar)})).catch((e=>{console.error("Error fetching initial cards:",e)}))}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,